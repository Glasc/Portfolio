---
import { Image } from "astro:assets"
import type { Projects } from "../../pages/[...slug].astro"

type Props = Projects[number]
const props = Astro.props
---

<li
  class="shadow w-full border dark:border-gray-800 border-gray-300 rounded cursor-pointer hover:border-accent/50 transition-transform duration-300 transform-gpu hover:-translate-y-1 group overflow-hidden opacity-0"
>
  <a
    href={props.data.link}
    class="flex flex-col sm:flex-row sm:space-x-5"
    target="_blank"
  >
    <section class="flex w-full p-6 flex-col h-full justify-between">
      <div>
        <h3
          class="text-base-content transition-colors duration-300 group-hover:text-accent font-bold uppercase text-xl"
        >
          {props.data.title}
        </h3>
        <p
          class="text-base-content/90 dark:text-base-content/70 font-medium mt-1 leading-relaxed"
        >
          {props.body}
        </p>
      </div>
      <div class="mt-5 flex flex-wrap font-medium gap-2">
        {
          props.data.technologies.split(",").map((technology) => {
            return (
              <span class="badge badge-primary transition-colors duration-300 badge-outline group-hover:text-accent group-hover:font-medium">
                {technology}
              </span>
            )
          })
        }
      </div>
    </section>
    <Image
      class="w-full sm:max-w-[18rem] object-cover rounded-r-md"
      src={props.data.cover as ImageMetadata}
      alt={props.data.coverAlt}
      format="avif"
      width={700}
      height={700}
    />
  </a>
</li>

<script>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const hasLoaded = entry.target.classList.contains("loaded")
      if (entry.isIntersecting || hasLoaded) {
        entry.target.classList.remove("opacity-0")
        entry.target.classList.add("loaded")
      } else {
        entry.target.classList.add("opacity-0")
      }
    })
  })

  const hiddenElements = document.querySelectorAll(
    ".opacity-0"
  ) as NodeListOf<HTMLLIElement>

  hiddenElements.forEach((element) => {
    observer.observe(element)
  })
</script>
